<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopSQL">
   <select id="getPriceIndex" parameterType="java.util.Map" resultType="priceIndex">
      <![CDATA[
      SELECT product_id, logtime, avg(price) AS price
      FROM priceConfirmed
      WHERE product_id = #{product_id}
         AND logtime < #{today}
         AND logtime >= DATE_SUB(#{today}, INTERVAL 7 DAY)
      GROUP BY logtime
      ]]>
   </select>
   
   <select id="getProductDTO" parameterType="int" resultType="productDTO">
      SELECT product.pid AS pid, product_name_kor, product_name_eng, product_id,
               category_id, brand.brand_name AS brand_name, gender_id,
               released_price, created_at, product_likes, product_bookmark,
               GROUP_CONCAT(product_img.img_file) AS img_file
      FROM product
         INNER JOIN product_img ON product.pid = product_img.pid
         INNER JOIN brand ON product.brand_id = brand.brand_id
      WHERE product.pid = #{pid}
      GROUP BY product.pid;
   </select>
   
   <select id="getProductList" parameterType="java.util.Map" resultType="productDTO">
	SELECT 
	product.*, brand.brand_name, product_img.img_file, category.category_name_eng, gender.gender_name
    FROM product 
    LEFT JOIN brand
    ON 
    product.brand_id = brand.brand_id
    LEFT JOIN product_img
    ON product.pid = product_img.pid
    LEFT JOIN category
    ON product.category_id = category.category_id
    LEFT JOIN gender
    ON product.gender_id = gender.gender_id
    WHERE product_img.img_file LIKE '%-1%'
    order by product.pid asc;
   </select>
	
	<select id="getBiddingPriceList" parameterType="java.util.Map" resultType="biddingDTO">
		WITH query1(pid, product_size, bidding_price)
AS (
   SELECT  pid, product_size, MIN(bidding_price) AS bidding_price
   FROM biddings
   WHERE pid =#{pid} AND status = '입찰중' AND position = '판매'
   GROUP BY product_size
   )
SELECT query2.bidding_id, query2.pid, query2.product_size, query2.bidding_price
FROM (
     SELECT  bidding_id, pid, product_size, bidding_price
     FROM biddings
     )AS query2, query1
WHERE query2.bidding_price = query1.bidding_price
   AND query2.product_size = query1.product_size
   AND query2.pid = query1.pid
   GROUP BY product_size
ORDER BY product_size ASC;
	</select>

	<select id="getBidiingPriceMax" parameterType="java.util.Map" resultType="biddingDTO">
		select product_size, pid, bidding_id, MAX(bidding_price) AS bidding_price
		from biddings
		where pid=#{pid} and status="입찰중"
		GROUP BY product_size 
		ORDER BY product_size ASC;
	</select>
	
	<insert id="writeBuyBidding" parameterType="java.util.Map">
		INSERT INTO biddings(member_id, pid, product_size, bidding_price, 
							 position, status, matched_bidding_id, created_at)
		VALUES(#{member_id}, #{pid}, #{product_size}, #{bidding_price}, '구매', '낙찰', #{matched_bidding_id}, sysdate())
	</insert>
	
	<select id="getProductInformation" parameterType="java.util.Map" resultType="biddingDTO">
		select product_size, MIN(bidding_price) AS bidding_price, pid, bidding_id
		from biddings
		join product using(pid)
		where product_size=#{size} AND  status="입찰중" and pid=#{pid} and position="판매"
		GROUP BY product_size 
		ORDER BY product_size ASC;
	</select>
	
	<update id="changeStatus" parameterType="java.util.Map">
	UPDATE biddings set position="구매", status="낙찰" where bidding_id=#{bidding_id} and product_size=#{product_size};
	</update>
	
	<insert id="sellSuccess" parameterType="java.util.Map">
		INSERT INTO biddings(member_id, pid, product_size, bidding_price, 
							 position, status, matched_bidding_id, created_at)
		VALUES(#{member_id}, #{pid}, #{product_size}, #{bidding_price}, '판매', '입찰중', #{matched_bidding_id}, sysdate())
	</insert>
	
</mapper>
